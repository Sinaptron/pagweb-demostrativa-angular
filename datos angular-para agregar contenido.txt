‚úÖ  CAMBIOS O ACTUALIZACIONES DE CONTENIDO:
üÜï IMAGENES:
Coloca las nuevas im√°genes en la carpeta src/assets/img/
Si se crea nueva subcarpeta dentro de img (por ejemplo, src/assets/img/galeria/), pon las im√°genes en esa subcarpeta.

REFERENCIARLAS EN: app.component.html
EJEMPLO:
  <div class="images">
    <img src="assets/img/img1.jpg" alt="Imagen 1">
    <img src="assets/img/galeria/imagen4.jpg" alt="Imagen 4">
  </div>

üÜï Agregar Nueva SECCION
En archivo app.component.html (o el archivo del componente donde quieras agregar la nueva secci√≥n).
A√±ade el HTML necesario para la nueva secci√≥n, como un t√≠tulo, subt√≠tulo, p√°rrafos, im√°genes, etc.
EJEMPLO:
<section class="testimonials">
  <h2>Testimonios</h2>
  <div class="testimonial">
    <p>"Este sitio web ha sido incre√≠ble para mi negocio."</p>
  </div>
</section>

üÜï Estilizar la Nueva Secci√≥n en CSS:
Dir√≠gete al archivo styles.css (o app.component.css si solo quieres que los estilos apliquen a ese componente).
Agrega las reglas CSS para dar formato y dise√±o a la nueva secci√≥n.

Si tienes ng serve corriendo, los cambios deber√≠an reflejarse autom√°ticamente en el navegador.
Si no, puedes detener el servidor (Ctrl + C) y luego reiniciarlo con ng serve para ver los cambios.

###############################
‚úÖ   agregar una nueva p√°gina en Angular

üÜï  1. Generar un Nuevo Componente para la P√°gina
Primero, necesitas crear un nuevo componente para la p√°gina que quieres agregar.

Abre la terminal y navega a tu directorio de proyecto.
Usa el comando ng generate component para crear un nuevo componente. Supongamos que quieres agregar una p√°gina llamada "acerca de" (about).
ng generate component about

Esto generar√° los siguientes archivos dentro de tu carpeta src/app/about:

src/app/about/
  ‚îú‚îÄ‚îÄ about.component.ts
  ‚îú‚îÄ‚îÄ about.component.html
  ‚îú‚îÄ‚îÄ about.component.css
  ‚îî‚îÄ‚îÄ about.component.spec.ts

üÜï  2. Configurar el Enrutador de Angular

Ahora necesitas configurar el enrutador para que tu nueva p√°gina sea accesible a trav√©s de una URL.
Abrir el archivo app-routing.module.ts: Este archivo contiene la configuraci√≥n del enrutador de tu aplicaci√≥n. Aqu√≠ es donde defines las rutas.
Agregar la Ruta para la Nueva P√°gina: Dentro de este archivo, debes agregar una nueva entrada en el array de rutas (Routes). La ruta debe tener la URL y el componente correspondiente.
Supongamos que la URL de tu nueva p√°gina es /about, y el componente es AboutComponent. Tendr√≠as que hacer lo siguiente:

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AboutComponent } from './about/about.component';  // Aseg√∫rate de importar el nuevo componente

const routes: Routes = [
  { path: '', component: HomeComponent },  // P√°gina de inicio (ya existente)
  { path: 'about', component: AboutComponent },  // Nueva p√°gina de "acerca de"
  // Puedes agregar m√°s rutas aqu√≠
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

Aqu√≠:
path: 'about': define la URL que usar√° el navegador para acceder a esta p√°gina (en este caso, http://localhost:4200/about).
component: AboutComponent: especifica qu√© componente se mostrar√° cuando se acceda a esta URL.

3. Actualizar el archivo app.module.ts: Aseg√∫rate de que el m√≥dulo de enrutamiento (AppRoutingModule) est√© importado en el archivo app.module.ts para que el enrutador funcione correctamente.

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { AppRoutingModule } from './app-routing.module'; // Aseg√∫rate de importar AppRoutingModule
import { AboutComponent } from './about/about.component';  // Aseg√∫rate de importar AboutComponent

@NgModule({
  declarations: [
    AppComponent,
    AboutComponent  // Declarar el nuevo componente
  ],
  imports: [
    BrowserModule,
    AppRoutingModule  // Aseg√∫rate de importar AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

üÜï  3. Agregar un Enlace de Navegaci√≥n a la Nueva P√°gina
Una vez que hayas configurado el enrutador, es probable que quieras agregar un enlace de navegaci√≥n para que los usuarios puedan acceder a esta nueva p√°gina.

Actualizar la Barra de Navegaci√≥n (Generalmente en app.component.html): Si tienes una barra de navegaci√≥n (navbar), abre app.component.html o el archivo HTML donde est√© la barra de navegaci√≥n y agrega un enlace a la nueva p√°gina.

Ejemplo de un enlace de navegaci√≥n:
<nav>
  <ul>
    <li><a routerLink="/">Inicio</a></li>
    <li><a routerLink="/about">Acerca de</a></li>  <!-- Enlace a la nueva p√°gina -->
  </ul>
</nav>

üÜï  4. Crear el Contenido de la Nueva P√°gina
Ahora que has creado el componente AboutComponent, abre el archivo about.component.html y agrega el contenido que desees para esta p√°gina.

Ejemplo de contenido para la p√°gina de "Acerca de":

<h1>Acerca de Nosotros</h1>
<p>Bienvenido a nuestra p√°gina de "Acerca de". Aqu√≠ encontrar√°s m√°s informaci√≥n sobre nuestra empresa.</p>

Si deseas agregar m√°s secciones o personalizar el estilo, puedes hacerlo en el archivo about.component.css.

üÜï  5. Verificar los Cambios en el Navegador
Guarda todos los archivos.

Aseg√∫rate de que el servidor de desarrollo est√© corriendo (ng serve).

Abre tu navegador y navega a http://localhost:4200/about para ver la nueva p√°gina.

üÜï  RECAPITULACION:
Resumen de Archivos y Cambios
Generar un Componente para la P√°gina:

Comando: ng generate component about.
Se crear√°n los archivos: about.component.ts, about.component.html, about.component.css, etc.

Configurar el Enrutador:
app-routing.module.ts: A√±adir la ruta de la nueva p√°gina.

app.module.ts: Aseg√∫rate de que AboutComponent est√© importado y declarado.

Agregar el Enlace de Navegaci√≥n:
app.component.html: Agregar un enlace (<a routerLink="/about">Acerca de</a>) en la barra de navegaci√≥n.

Dise√±ar el Contenido de la P√°gina:
about.component.html: Agregar el contenido espec√≠fico de la nueva p√°gina.

Verificar:
Ejecutar ng serve y verificar la nueva p√°gina en el navegador.


üÜï  AGREGAR SCRIPT AL PROYECTO

Para agregar un archivo script.js en un proyecto de p√°gina web con Angular (usando HTML y CSS), el proceso no es igual que en proyectos est√°ticos. Angular usa TypeScript y una arquitectura modular, as√≠ que se recomienda evitar usar archivos .js sueltos. Sin embargo, si necesitas incluir un archivo script.js por alguna raz√≥n espec√≠fica (como una librer√≠a externa o un comportamiento personalizado), puedes hacerlo de forma controlada.

‚úÖ 1. Coloca el archivo script.js
Gu√°rdalo en la carpeta src/assets/js/ para mantener el orden del proyecto.

Ruta sugerida:

/src/assets/js/script.js

‚úÖ 2. Declara el script en el archivo angular.json
Ubica el archivo angular.json en la ra√≠z del proyecto. Busca la secci√≥n build > options > scripts y agrega la ruta a tu archivo.

"scripts": [
  "src/assets/js/script.js"
]

EJEMPLO
    "options": {
      "scripts": [
        "src/assets/js/script.js"
      ],
      ...
    }

‚úÖ 3. Usa el script en tu HTML o componente
Una vez agregado, el script ya est√° disponible globalmente. Si tu script.js depende del DOM (como jQuery o funciones de animaci√≥n), usa el hook ngAfterViewInit() en el componente.

import { AfterViewInit, Component } from '@angular/core';

declare var miFuncionJS: any; // ejemplo de funci√≥n global en script.js

@Component({
  selector: 'app-ejemplo',
  templateUrl: './ejemplo.component.html',
})
export class EjemploComponent implements AfterViewInit {
  ngAfterViewInit() {
    miFuncionJS(); // Llamar funci√≥n de script.js despu√©s de renderizar la vista
  }
}    

‚úÖ 4. Ejecuta el proyecto para probar

ng serve

7. üîÅ Reinicia el servidor
Despu√©s de modificar angular.json, siempre corre:
ng serve --open


üîí Nota importante
Si est√°s usando funciones que manipulan directamente el DOM, Angular recomienda usar ElementRef o Renderer2, o mejor a√∫n, integrar la l√≥gica al propio framework en lugar de scripts externos.